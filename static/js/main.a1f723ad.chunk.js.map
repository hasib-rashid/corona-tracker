{"version":3,"sources":["api/fetchData.ts","components/Map/Map.tsx","components/UncontrolledLottie.tsx","components/Header/Header.tsx","components/Information/Information.tsx","App.tsx","hooks/useWindowSize.ts","api/utilities.ts","index.tsx"],"names":["url","a","fetch","res","json","resJson","mapCases","mapDeaths","mapRecoveries","mapFlags","mapActive","mapCritical","forEach","item","fillmapCases","fillmapDeaths","fillmapCritical","fillmapRecoveries","fillmapFlags","fillmapActive","countryInfo","iso2","cases","deaths","critical","console","log","recovered","active","flag","fetchData","Map","props","className","map","backgroundColor","zoomOnScroll","containerStyle","width","height","onRegionClick","handleClick","containerClassName","regionStyle","initial","fill","stroke","hover","cursor","selected","selectedHover","regionsSelectable","onRegionTipShow","e","el","code","dataCases","dataDeaths","dataCritical","dataRecoveries","dataActive","dataFlags","html","formatNumber","series","regions","values","scale","normalizeFunction","number","minimumFractionDigits","Number","parseFloat","toLocaleString","undefined","maximumFractionDigits","UncontrolledLottie","defaultOptions","loop","autoplay","animationData","rendererSettings","heightTotal","this","size","style","options","Component","Header","Information","useState","response","setResponse","useEffect","fetching","App","location","setLocation","count","isClient","window","getSize","innerWidth","innerHeight","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener","useWindowSize","then","isMobile","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1f723ad.chunk.js","sourcesContent":["async function fetchData(url: string) {\r\n    const res = await fetch(url); //here we just connect to server\r\n    const resJson = await res.json(); // read body response in asynch way\r\n    const mapCases = {};\r\n    const mapDeaths = {}\r\n    const mapRecoveries = {}\r\n    const mapFlags = {}\r\n    const mapActive = {}\r\n    const mapCritical = {}\r\n\r\n    resJson.forEach((item: any) => {\r\n        fillmapCases(mapCases, item);\r\n        fillmapDeaths(mapDeaths, item);\r\n        fillmapCritical(mapCritical, item)\r\n        fillmapRecoveries(mapRecoveries, item);\r\n        fillmapFlags(mapFlags, item)\r\n        fillmapActive(mapActive, item)\r\n    });\r\n    return { mapCases, mapDeaths, mapCritical, mapRecoveries, mapActive, mapFlags };\r\n}\r\n\r\nfunction fillmapCases(mapCases: any, item: any) {\r\n    if (mapCases[item.countryInfo.iso2]) {\r\n        mapCases[item.countryInfo.iso2] += item.cases;\r\n    } else {\r\n        mapCases[item.countryInfo.iso2] = item.cases;\r\n    }\r\n}\r\n\r\nfunction fillmapDeaths(mapDeaths: any, item: any) {\r\n    if (mapDeaths[item.countryInfo.iso2]) {\r\n        mapDeaths[item.countryInfo.iso2] += item.deaths;\r\n    } else {\r\n        mapDeaths[item.countryInfo.iso2] = item.deaths;\r\n    }\r\n}\r\n\r\nfunction fillmapCritical(mapCritical: any, item: any) {\r\n    if (mapCritical[item.countryInfo.iso2]) {\r\n        mapCritical[item.countryInfo.iso2] += item.critical;\r\n        console.log(item)\r\n    } else {\r\n        mapCritical[item.countryInfo.iso2] = item.critical;\r\n    }\r\n}\r\n\r\nfunction fillmapRecoveries(mapRecoveries: any, item: any) {\r\n    if (mapRecoveries[item.countryInfo.iso2]) {\r\n        mapRecoveries[item.countryInfo.iso2] += item.recovered;\r\n    } else {\r\n        mapRecoveries[item.countryInfo.iso2] = item.recovered;\r\n    }\r\n}\r\n\r\nfunction fillmapActive(mapActive: any, item: any) {\r\n    if (mapActive[item.countryInfo.iso2]) {\r\n        mapActive[item.countryInfo.iso2] += item.active;\r\n    } else {\r\n        mapActive[item.countryInfo.iso2] = item.active;\r\n    }\r\n}\r\n\r\nfunction fillmapFlags(mapFlags: any, item: any) {\r\n    if (mapFlags[item.countryInfo.iso2]) {\r\n        mapFlags[item.countryInfo.iso2] += item.countryInfo.flag;\r\n    } else {\r\n        mapFlags[item.countryInfo.iso2] = item.countryInfo.flag;\r\n    }\r\n}\r\n\r\nexport default fetchData;\r\n","import React from \"react\";\r\n// @ts-ignore\r\nimport { VectorMap } from \"react-jvectormap\";\r\nimport \"./map.css\";\r\n\r\nexport default function Map(props: any) {\r\n    return (\r\n        <div className=\"map-container\">\r\n            <VectorMap\r\n                map={\"world_mill\"}\r\n                backgroundColor=\"transparent\" //change it to ocean blue: #0077be\r\n                zoomOnScroll={true}\r\n                containerStyle={{\r\n                    width: \"100%\",\r\n                    height: \"65vh\",\r\n                }}\r\n                onRegionClick={props.handleClick} //gets the country code\r\n                containerClassName=\"map\"\r\n                regionStyle={{\r\n                    initial: {\r\n                        fill: \"#e4e4e4\",\r\n                        \"fill-opacity\": 0.9,\r\n                        stroke: \"none\",\r\n                        \"stroke-width\": 0,\r\n                        \"stroke-opacity\": 0,\r\n                    },\r\n                    hover: {\r\n                        \"fill-opacity\": 0.8,\r\n                        cursor: \"pointer\",\r\n                    },\r\n                    selected: {\r\n                        fill: \"#7418ca\", //color for the clicked country\r\n                    },\r\n                    selectedHover: {},\r\n                }}\r\n                regionsSelectable={true}\r\n                onRegionTipShow={(e: any, el: any, code: any) => {\r\n                    const dataCases = props.mapCases[code];\r\n                    const dataDeaths = props.mapDeaths[code];\r\n                    const dataCritical = props.mapCritical[code];\r\n                    const dataRecoveries = props.mapRecoveries[code];\r\n                    const dataActive = props.mapActive[code]\r\n                    const dataFlags = props.mapFlags[code];\r\n                    return el.html(\r\n                        \"<br />\" +\r\n                        \"<b>\" +\r\n                        `<img class='flag' src='${dataFlags}' alt='Flags' /><br />` +\r\n                        el.html() +\r\n                        \"</b></br>\" +\r\n                        `<b>Confirmed: <span class='confirmed'>${formatNumber(dataCases ? dataCases : \"Unknown\")}<span></b>` +\r\n                        `<b>Deceased: <span class='deaths'>${formatNumber(dataDeaths ? dataDeaths : \"Unknown\")}<span></b>` +\r\n                        `<b>Critical: <span class='critical'>${formatNumber(dataCritical ? dataCritical : \"Unknown\")}<span></b>` +\r\n                        `<b>Recovered: <span class='recoveries'>${formatNumber(dataRecoveries ? dataRecoveries : \"Unknown\")}<span></b>` +\r\n                        `<b>Active: <span class='active'>${formatNumber(dataActive ? dataActive : \"Unknown\")}<span></b><br>`\r\n                    );\r\n                }}\r\n                series={{\r\n                    regions: [\r\n                        {\r\n                            values: props.mapCases, //this is your data\r\n                            scale: [\"#E5D1F9\", \"#5606A5\"], //your color game's here\r\n                            normalizeFunction: \"polynomial\",\r\n                        },\r\n                    ],\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction formatNumber(number: string, minimumFractionDigits = 0) {\r\n    return Number.parseFloat(number).toLocaleString(undefined, {\r\n        minimumFractionDigits,\r\n        maximumFractionDigits: 2,\r\n    });\r\n}","import React, { Component } from 'react'\r\nimport Lottie from 'react-lottie'\r\nimport animationData from '../animations/loading.json';\r\n\r\nclass UncontrolledLottie extends Component {\r\n\trender() {\r\n\t\tconst defaultOptions = {\r\n\t\t\tloop: true,\r\n\t\t\tautoplay: true,\r\n\t\t\tanimationData: animationData,\r\n\t\t\trendererSettings: {\r\n\t\t\t}\r\n\t\t};\r\n\t\t// @ts-ignore\r\n\t\tconst heightTotal = this.props.size ? this.props.size.height : '';\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Lottie style={{ height: heightTotal }} options={defaultOptions}\r\n\t\t\t\t\theight={200}\r\n\t\t\t\t\twidth={200}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default UncontrolledLottie","import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h2>Covid 19 Tracker</h2>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Information.css'\r\n\r\nconst Information = () => {\r\n    const [response, setResponse]: any = useState({})\r\n\r\n    useEffect(() => {\r\n        const fetching = async () => {\r\n            const res = await fetch(\"https://disease.sh/v3/covid-19/all/\")\r\n            const resJson = await res.json()\r\n\r\n            setResponse(resJson)\r\n        }\r\n\r\n        fetching()\r\n    }, [])\r\n\r\n    return (\r\n        <article>\r\n            <h2>WorldWide</h2>\r\n            <div className=\"info_row\">\r\n                <h3>Confirmed: <span className=\"confirmed\">{formatNumber(response.cases)}</span></h3>\r\n                <h3>Deaths: <span className=\"deaths\">{formatNumber(response.deaths)}</span></h3>\r\n                <h3>Recovered: <span className=\"recovered\">{formatNumber(response.recovered)}</span></h3>\r\n            </div>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Information\r\n\r\nfunction formatNumber(number: string, minimumFractionDigits = 0) {\r\n    return Number.parseFloat(number).toLocaleString(undefined, {\r\n        minimumFractionDigits,\r\n        maximumFractionDigits: 2,\r\n    });\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport fetchData from './api/fetchData';\r\nimport { disease } from './api/utilities';\r\nimport Map from './components/Map/Map';\r\nimport UncontrolledLottie from './components/UncontrolledLottie';\r\nimport { useWindowSize } from './hooks/useWindowSize';\r\nimport { isMobile } from 'react-device-detect'\r\nimport Header from './components/Header/Header';\r\nimport Information from './components/Information/Information';\r\n\r\nfunction App() {\r\n\tconst [location, setLocation] = useState();\r\n\tconst [count] = useState(0);\r\n\tconst size = useWindowSize();\r\n\r\n\tlet mapCases = {}\r\n\tlet mapDeaths = {}\r\n\tlet mapCritical = {}\r\n\tlet mapRecoveries = {}\r\n\tlet mapFlags = {}\r\n\tlet mapActive = {}\r\n\r\n\tuseEffect(() => {\r\n\t\t// eslint-disable-next-line\r\n\t\tfetchData(disease).then((res) => {\r\n\t\t\t// @ts-ignore\r\n\t\t\tsetLocation(res)\r\n\t\t});\r\n\t}, [count]);\r\n\r\n\t// @ts-ignore\r\n\tmapCases = location && location.mapCases ? location.mapCases : undefined;\r\n\t// @ts-ignore\r\n\tmapDeaths = location && location.mapDeaths ? location.mapDeaths : undefined;\r\n\t// @ts-ignore\r\n\tmapCritical = location && location.mapCritical ? location.mapCritical : undefined;\r\n\t// @ts-ignore\r\n\tmapRecoveries = location && location.mapRecoveries ? location.mapRecoveries : undefined;\r\n\t// @ts-ignore\r\n\tmapActive = location && location.mapActive ? location.mapActive : undefined;\r\n\t// @ts-ignore\r\n\tmapFlags = location && location.mapFlags ? location.mapFlags : undefined;\r\n\r\n\tif (location) {\r\n\t\tif (isMobile) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<div className=\"topRateAndMap\">\r\n\t\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t<Map\r\n\t\t\t\t\t\t\tmapCases={mapCases}\r\n\t\t\t\t\t\t\tmapDeaths={mapDeaths}\r\n\t\t\t\t\t\t\tmapCritical={mapCritical}\r\n\t\t\t\t\t\t\tmapRecoveries={mapRecoveries}\r\n\t\t\t\t\t\t\tmapActive={mapActive}\r\n\t\t\t\t\t\t\tmapFlags={mapFlags}\r\n\t\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=\"app-container\">\r\n\t\t\t\t<div className=\"topRateAndMap\">\r\n\t\t\t\t\t<Header />\r\n\t\t\t\t\t<Map\r\n\t\t\t\t\t\tmapCases={mapCases}\r\n\t\t\t\t\t\tmapDeaths={mapDeaths}\r\n\t\t\t\t\t\tmapCritical={mapCritical}\r\n\t\t\t\t\t\tmapRecoveries={mapRecoveries}\r\n\t\t\t\t\t\tmapActive={mapActive}\r\n\t\t\t\t\t\tmapFlags={mapFlags}\r\n\t\t\t\t\t\tsize={size}\r\n\t\t\t\t\t/>\r\n\t\t\t\t\t<Information />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else {\r\n\t\t// @ts-ignore\r\n\t\treturn <UncontrolledLottie size={size} />;\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport function useWindowSize() {\r\n    const isClient = typeof window === 'object';\r\n\r\n    function getSize() {\r\n        return {\r\n            width: isClient ? window.innerWidth : undefined,\r\n            height: isClient ? window.innerHeight : undefined\r\n        };\r\n    }\r\n\r\n    const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n    useEffect((): any => {\r\n        if (!isClient) {\r\n            return false;\r\n        }\r\n\r\n        function handleResize() {\r\n            setWindowSize(getSize());\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    return windowSize;\r\n}\r\n","export const url = \"https://coronavirus-tracker-api.herokuapp.com/v2/locations?source=jhu\";\r\nexport const disease = \"https://disease.sh/v3/covid-19/countries/\"\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<App />\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById('root')\r\n);"],"sourceRoot":""}